#include "vkdev/assets.h"
#include "vkdev/command.h"
#include "vkdev/descriptor.h"
#include "vkdev/device.h"
#include "vkdev/buffer.h"
#include "vkdev/instance.h"
#include "vkdev/pipeline.h"
#include "vkdev/rendertarget.h"
#include "vkdev/swapchain.h"
#include "vkdev/window.h"

#define GLM_FORCE_RADIANS
// The perspective projection matrix generated by GLM will use the OpenGL depth range of -1.0 to 1.0 by default. We need to configure it to use the Vulkan range of 0.0 to 1.0 
#define GLM_FORCE_DEPTH_ZERO_TO_ONE
#define GLM_ENABLE_EXPERIMENTAL
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>

#include <chrono>

#include <iostream>
#include <stdexcept>
#include <functional>
#include <cstdlib>
#include <algorithm>
#include <optional>
#include <set>
#include <limits>
#include <fstream>
#include <vector>
#include <array>
#include <unordered_map>
#include <memory>
#include <thread>

#include <string.h>

constexpr int WIDTH = 800;
constexpr int HEIGHT = 600;

const std::string MODEL_PATH = "models/chalet.model";
const std::string TEXTURE_PATH = "textures/chalet.jpg";


const std::vector<std::string> requiredDeviceExtensions = {
    VK_KHR_SWAPCHAIN_EXTENSION_NAME
};

// alignas is used to be explicit in regards to vulkan alignment requirements.  mat4 should be aligned to multiples of 16 bytes
struct UniformBufferObject {
    alignas(16) glm::mat4 model;
    alignas(16) glm::mat4 view;
    alignas(16) glm::mat4 proj;
};

class VulkanTestApplication {
private:

    void loadAssets() {
        vkdev::Image texture = vkdev::Texture::createFromFile(TEXTURE_PATH.c_str(), *device, *commandPool);
        assets.textures["texture"] = std::make_unique<vkdev::Image>(texture);

        vkdev::MeshData meshData;
        meshData.loadFromFile(MODEL_PATH);

        auto mesh = std::make_unique<vkdev::Mesh>(*device);
        mesh->create(meshData, *commandPool);
        
        auto meshDescription = assets.meshDescriptions.find(mesh->vertexAttributes);
        if (meshDescription == assets.meshDescriptions.end()) {
            assets.meshDescriptions[mesh->vertexAttributes] = std::make_unique<vkdev::MeshDescription>(mesh->getMeshDescription());
        }

        assets.meshes["mesh"] = std::move(mesh);

        vkdev::ShaderData shaderData;
        shaderData.loadFiles("shaders/shader.vert.spv", "shaders/shader.frag.spv", "shaders/shader.json");

        auto shader = std::make_unique<vkdev::Shader>(*device);
        shader->create(shaderData);
        assets.shaders["shader"] = std::move(shader);
    }

    // Create one descriptor pool which will have a descriptor set for each image in the swap chain
    // note that we need to specify a pool size for each type of descriptor that we have in our shader.
    void createDescriptor() {
        vkdev::Material material;
        material.shader = "shader";
        material.textures["texSampler"] = assets.textures["texture"].get();

        descriptor = std::make_unique<vkdev::Descriptor>(*device);
        descriptor->create(material, assets, static_cast<uint32_t>(swapchain->images.size()), _mipLevels);
    }

    void createGraphicsPipeline() {
        auto& shader = assets.shaders["shader"];
        auto& mesh = assets.meshes["mesh"];
        auto& meshDescription = assets.meshDescriptions[mesh->vertexAttributes];

        pipeline = std::make_unique<vkdev::Pipeline>(*device);
        pipeline = vkdev::createDefaultPipeline(*device, *shader, *meshDescription, *renderTarget);
    }

    // drawing commands involves binding a framebuffer, we will have to record a command buffer for every image in the swap chain.
    // TODO: look into use of secondary command buffer
    void createCommandBuffers() {
        auto& mesh = assets.meshes["mesh"];

        _commandBuffers.resize(renderTarget->framebuffers.size());

        VkCommandBufferAllocateInfo allocInfo = {};
        allocInfo.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO;
        allocInfo.commandPool = commandPool->handle;
        allocInfo.level = VK_COMMAND_BUFFER_LEVEL_PRIMARY;
        allocInfo.commandBufferCount = static_cast<uint32_t>(_commandBuffers.size());

        if (vkAllocateCommandBuffers(device->logical, &allocInfo, _commandBuffers.data()) != VK_SUCCESS) {
            throw std::runtime_error("failed to allocate command buffers");
        }

        for (size_t i = 0; i < _commandBuffers.size(); i++) {
            VkCommandBufferBeginInfo beginInfo = {};
            beginInfo.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO;
            beginInfo.flags = 0;
            beginInfo.pInheritanceInfo = nullptr;

            if (vkBeginCommandBuffer(_commandBuffers[i], &beginInfo) != VK_SUCCESS) {
                throw std::runtime_error("failed to begin command buffer recording");
            }

            VkRenderPassBeginInfo renderPassInfo = {};
            renderPassInfo.sType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO;
            renderPassInfo.renderPass = renderTarget->renderPass;
            renderPassInfo.framebuffer = renderTarget->framebuffers[i];

            renderPassInfo.renderArea.offset = { 0, 0 };
            renderPassInfo.renderArea.extent = swapchain->extent;

            // clear value order should correspond to order of attachments.
            std::array<VkClearValue, 2> clearValues = {};
            clearValues[0].color = { 0.0f, 0.0f, 0.0f, 1.0f };
            clearValues[1].depthStencil = { 1.0f, 0 }; // The range of depths in the depth buffer is 0.0 to 1.0 in Vulkan, where 1.0 lies at the far view plane and 0.0 at the near view plane.

            renderPassInfo.clearValueCount = static_cast<uint32_t>(clearValues.size());
            renderPassInfo.pClearValues = clearValues.data();

            vkCmdBeginRenderPass(_commandBuffers[i], &renderPassInfo, VK_SUBPASS_CONTENTS_INLINE);
            vkCmdBindPipeline(_commandBuffers[i], VK_PIPELINE_BIND_POINT_GRAPHICS, pipeline->handle);

            VkBuffer vertexBuffers[] = { mesh->vertexBuffer.buffer };
            VkDeviceSize offsets[] = { 0 };

            vkCmdBindVertexBuffers(_commandBuffers[i], 0, 1, vertexBuffers, offsets);

            // note that the current sample model has index count > 65535 so we use uint32_t
            //vkCmdBindIndexBuffer(_commandBuffers[i], _indexBuffer, 0, VK_INDEX_TYPE_UINT16);
            vkCmdBindIndexBuffer(_commandBuffers[i], mesh->indexBuffer.buffer, 0, VK_INDEX_TYPE_UINT32);

            // descriptor sets are not unique to graphics pipeline.  Therefore we need to specify we are binding to graphics (as opposed to compute)
            vkCmdBindDescriptorSets(_commandBuffers[i], VK_PIPELINE_BIND_POINT_GRAPHICS, pipeline->layout, 0, 1, &descriptor->descriptorSets[i], 0, nullptr);

            vkCmdDrawIndexed(_commandBuffers[i], static_cast<uint32_t>(mesh->elementCount), 1, 0, 0, 0);

            vkCmdEndRenderPass(_commandBuffers[i]);

            if (vkEndCommandBuffer(_commandBuffers[i]) != VK_SUCCESS) {
                throw std::runtime_error("failed to record command buffer");
            }
        }
    }

    void updateUniformBuffer(uint32_t bufferIndex) {
        // get the application time
        static auto startTime = std::chrono::high_resolution_clock::now();
        auto currentTime = std::chrono::high_resolution_clock::now();
        float time = std::chrono::duration<float, std::chrono::seconds::period>(currentTime - startTime).count();

        // define MVP
        UniformBufferObject ubo = {};
        ubo.model = glm::rotate(glm::mat4(1.0f), time * glm::radians(90.0f), glm::vec3(0.0f, 0.0f, 1.0f));
        ubo.view = glm::lookAt(glm::vec3(2.0f, 2.0f, 2.0f), glm::vec3(0.0f, 0.0f, 0.0f), glm::vec3(0.0f, 0.0f, 1.0f));
        ubo.proj = glm::perspective(glm::radians(45.0f), swapchain->extent.width / (float)swapchain->extent.height, 0.1f, 10.0f);

        // GLM was originally designed for OpenGL, where the Y coordinate of the clip coordinates is inverted.
        // The easiest way to compensate for that is to flip the sign on the scaling factor of the Y axis in the projection matrix.
        // If you don't do this, then the image will be rendered upside down.
        ubo.proj[1][1] *= -1;

        // copy the MVP into the corresponding uniform buffer
        // TODO: look into using push constants for a more efficient means of passing the uniform data to shaders
        auto& uniformBufferVector = descriptor->uniformBuffers["UniformBufferObject"];
        void* data = nullptr;
        vkMapMemory(device->logical, uniformBufferVector[bufferIndex].memory, 0, sizeof(ubo), 0, &data);
        memcpy(data, &ubo, sizeof(ubo));
        vkUnmapMemory(device->logical, uniformBufferVector[bufferIndex].memory);
    }

    void init() {
        window = std::make_unique<vkdev::Window>(instance);
        window->createWindow(WIDTH, HEIGHT);

        instance.create(_enableValidation);
        
        window->createSurface();
        device = std::make_unique<vkdev::Device>(instance, window->surface);
        device->create(requiredDeviceExtensions);

        commandPool = std::make_unique<vkdev::CommandPool>(*device, device->graphicsQueue);
        commandPool->create();

        swapchain = std::make_unique<vkdev::SwapChain>(*device, window->surface);
        swapchain->create(window->getFramebufferSize());

        renderTarget = std::make_unique<vkdev::SwapChainRenderTarget>(*device);
        renderTarget->msaaSampleCount = std::min(VK_SAMPLE_COUNT_4_BIT, device->getMaxSupportedSampleCount());
        renderTarget->create(*swapchain, *commandPool);

        loadAssets();

        createGraphicsPipeline();

        createDescriptor();
        createCommandBuffers();
        swapchain->createSyncObjects();
    }

    void recreateSwapChain() {
        window->waitForMinimize();

        vkDeviceWaitIdle(device->logical);

        cleanupSwapChain();
        swapchain->create(window->getFramebufferSize());
        renderTarget->create(*swapchain, *commandPool);

        createGraphicsPipeline();

        createDescriptor();
        createCommandBuffers();
    }

    void mainLoop() {
        auto last_update_time = std::chrono::high_resolution_clock::now();
        while (!window->shouldClose()) {
            auto current_update_time = std::chrono::high_resolution_clock::now();
            auto milliseconds = std::chrono::duration_cast<std::chrono::milliseconds>(current_update_time - last_update_time).count();

            if (milliseconds >= 16) {
                window->poll();

                if (window->wasResized()) {
                    window->markResizeHandled();
                    recreateSwapChain();
                }
                else {
                    uint32_t frameIndex = 0;
                    VkResult result = swapchain->aquireFrame(frameIndex);

                    if (result == VK_ERROR_OUT_OF_DATE_KHR) {
                        recreateSwapChain();
                    }
                    else {
                        updateUniformBuffer(frameIndex);
                        result = swapchain->drawFrame(frameIndex, _commandBuffers[frameIndex]);

                        if (result != VK_SUCCESS) {
                            recreateSwapChain();
                        }
                    }
                    last_update_time = current_update_time;
                }
            }
            else {
                std::this_thread::sleep_for(std::chrono::milliseconds(1));
            }
        }

        vkDeviceWaitIdle(device->logical);
    }

    void cleanupSwapChain() {
        vkFreeCommandBuffers(device->logical, commandPool->handle, static_cast<uint32_t>(_commandBuffers.size()), _commandBuffers.data());

        pipeline->cleanup();
        renderTarget->cleanup();
        swapchain->cleanupImages();
        descriptor->cleanup();
    }

    void cleanup() {
        cleanupSwapChain();

        swapchain->cleanupSyncObjects();

        commandPool->cleanup();

        assets.cleanup();

        device->cleanup();
        window->cleanupSurface();
        instance.cleanup();

        window->cleanupWindow();
    }

public:
    void run() {
        init();
        mainLoop();
        cleanup();
    }

    inline void enableValidationLayers(bool enableValidation) { _enableValidation = enableValidation; }

private:
    std::unique_ptr<vkdev::Window> window;
    vkdev::Instance instance;
    std::unique_ptr<vkdev::Device> device;

    std::unique_ptr<vkdev::SwapChain> swapchain;
    std::unique_ptr<vkdev::SwapChainRenderTarget> renderTarget;

    std::unique_ptr<vkdev::Pipeline> pipeline;

    std::unique_ptr<vkdev::CommandPool> commandPool;
    std::vector<VkCommandBuffer> _commandBuffers;

    vkdev::Assets assets;

    std::unique_ptr<vkdev::Descriptor> descriptor;

    uint32_t _mipLevels = 1;

    bool _enableValidation = false;
};

int main(int argc, char** argv) {
    VulkanTestApplication app;

#if NDEBUG
    app.enableValidationLayers(false);
#else
    app.enableValidationLayers(true);
#endif

    try {
        app.run();
    }
    catch (const std::exception & e) {
        std::cerr << e.what() << std::endl;
        return EXIT_FAILURE;
    }

    return EXIT_SUCCESS;
}