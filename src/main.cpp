#include "vkdev/assets.h"
#include "vkdev/command.h"
#include "vkdev/descriptor.h"
#include "vkdev/device.h"
#include "vkdev/buffer.h"
#include "vkdev/instance.h"
#include "vkdev/swapchain.h"
#include "vkdev/window.h"

#define GLM_FORCE_RADIANS
// The perspective projection matrix generated by GLM will use the OpenGL depth range of -1.0 to 1.0 by default. We need to configure it to use the Vulkan range of 0.0 to 1.0 
#define GLM_FORCE_DEPTH_ZERO_TO_ONE
#define GLM_ENABLE_EXPERIMENTAL
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>

#include <chrono>

#include <iostream>
#include <stdexcept>
#include <functional>
#include <cstdlib>
#include <algorithm>
#include <optional>
#include <set>
#include <limits>
#include <fstream>
#include <vector>
#include <array>
#include <unordered_map>
#include <memory>
#include <thread>

#include <string.h>

constexpr int WIDTH = 800;
constexpr int HEIGHT = 600;

const std::string MODEL_PATH = "models/chalet.model";
const std::string TEXTURE_PATH = "textures/chalet.jpg";


const std::vector<std::string> requiredDeviceExtensions = {
    VK_KHR_SWAPCHAIN_EXTENSION_NAME
};

// alignas is used to be explicit in regards to vulkan alignment requirements.  mat4 should be aligned to multiples of 16 bytes
struct UniformBufferObject {
    alignas(16) glm::mat4 model;
    alignas(16) glm::mat4 view;
    alignas(16) glm::mat4 proj;
};

class VulkanTestApplication {
private:
    void createRenderPass() {
        VkAttachmentDescription colorAttachment = {};
        colorAttachment.format = swapchain->imageFormat;
        colorAttachment.samples = _msaaSamples; // multisampling

        // These apply to color and depth data
        colorAttachment.loadOp = VK_ATTACHMENT_LOAD_OP_CLEAR; // we will clear to black b4 rendering each frame
        colorAttachment.storeOp = VK_ATTACHMENT_STORE_OP_STORE;
        colorAttachment.stencilLoadOp = VK_ATTACHMENT_LOAD_OP_DONT_CARE;
        colorAttachment.stencilStoreOp = VK_ATTACHMENT_STORE_OP_DONT_CARE;

        colorAttachment.initialLayout = VK_IMAGE_LAYOUT_UNDEFINED;
        colorAttachment.finalLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL;

        VkAttachmentDescription depthAttachment = {};
        depthAttachment.format = findDepthBufferFormat(); // this should be the same as the depth image itself
        depthAttachment.samples = _msaaSamples;
        depthAttachment.loadOp = VK_ATTACHMENT_LOAD_OP_CLEAR; // clear depth buffer before rendering
        depthAttachment.storeOp = VK_ATTACHMENT_STORE_OP_DONT_CARE; // currently not used after drawing has finished so we dont care how its stored.
        depthAttachment.stencilLoadOp = VK_ATTACHMENT_LOAD_OP_DONT_CARE;
        depthAttachment.stencilStoreOp = VK_ATTACHMENT_STORE_OP_DONT_CARE;
        depthAttachment.initialLayout = VK_IMAGE_LAYOUT_UNDEFINED;
        depthAttachment.finalLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL;

        // note that multisampled color attachments cannot be presented directly to the screen.  They need to be resolved to an regular image.
        // this is not required for depth attachments because they are not presented to the screen!
        // If MSAA is disabled then we should not create a resolve attachment.  Doing so will cause validation error
        VkAttachmentDescription colorAttachmentResolve = {};
        colorAttachmentResolve.format = swapchain->imageFormat;
        colorAttachmentResolve.samples = VK_SAMPLE_COUNT_1_BIT; // we need to convert the image to 1 sample per pixel
        colorAttachmentResolve.loadOp = VK_ATTACHMENT_LOAD_OP_DONT_CARE;
        colorAttachmentResolve.storeOp = VK_ATTACHMENT_STORE_OP_STORE;
        colorAttachmentResolve.stencilLoadOp = VK_ATTACHMENT_LOAD_OP_DONT_CARE;
        colorAttachmentResolve.stencilStoreOp = VK_ATTACHMENT_STORE_OP_DONT_CARE;
        colorAttachmentResolve.initialLayout = VK_IMAGE_LAYOUT_UNDEFINED;
        colorAttachmentResolve.finalLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR; // signals we need this in a format that can be presented to the screen via swapchain.

        std::array<VkAttachmentDescription, 3> attachmentDescriptions = { colorAttachment, depthAttachment, colorAttachmentResolve };

        VkAttachmentReference colorAttachmentRef = {};
        colorAttachmentRef.attachment = 0;
        colorAttachmentRef.layout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL;

        VkAttachmentReference depthAttachmentReference = {};
        depthAttachmentReference.attachment = 1;
        depthAttachmentReference.layout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL;

        VkAttachmentReference colorAttachmentResolveRef = {};
        colorAttachmentResolveRef.attachment = 2;
        colorAttachmentResolveRef.layout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL;

        VkSubpassDescription subpass = {};
        subpass.pipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS;
        subpass.colorAttachmentCount = 1;
        subpass.pColorAttachments = &colorAttachmentRef;
        subpass.pDepthStencilAttachment = &depthAttachmentReference; // note that subpass can only have 1 depth + stencil attachment
        subpass.pResolveAttachments = &colorAttachmentResolveRef; // handles converting multisampled image to single sampled image for presentation

        // we need to configure the subpass of our renderpass to wait for the color attachment stage of the pipeline to begin
        // could also set waitStages for the imageAvailableSemaphore to VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT
        VkSubpassDependency subpassDependency = {};
        subpassDependency.srcSubpass = VK_SUBPASS_EXTERNAL;
        subpassDependency.dstSubpass = 0;

        subpassDependency.srcStageMask = VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT;
        subpassDependency.srcAccessMask = 0;

        subpassDependency.dstStageMask = VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT;
        subpassDependency.dstAccessMask = VK_ACCESS_COLOR_ATTACHMENT_READ_BIT | VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT;

        VkRenderPassCreateInfo renderPassInfo = {};
        renderPassInfo.sType = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO;
        renderPassInfo.attachmentCount = static_cast<uint32_t>(attachmentDescriptions.size());
        renderPassInfo.pAttachments = attachmentDescriptions.data();
        renderPassInfo.subpassCount = 1;
        renderPassInfo.pSubpasses = &subpass;
        renderPassInfo.dependencyCount = 1;
        renderPassInfo.pDependencies = &subpassDependency;

        if (vkCreateRenderPass(device->logical, &renderPassInfo, nullptr, &_renderPass) != VK_SUCCESS) {
            throw std::runtime_error("failed to create render pass.");
        }
    }

    void loadAssets() {
        vkdev::Image texture = vkdev::Texture::createFromFile(TEXTURE_PATH.c_str(), *device, *commandPool);
        assets.textures["texture"] = std::make_unique<vkdev::Image>(texture);

        vkdev::MeshData meshData;
        meshData.loadFromFile(MODEL_PATH);

        auto mesh = std::make_unique<vkdev::Mesh>(*device);
        mesh->create(meshData, *commandPool);
        assets.meshes["mesh"] = std::move(mesh);

        vkdev::ShaderData shaderData;
        shaderData.loadFiles("shaders/shader.vert.spv", "shaders/shader.frag.spv", "shaders/shader.json");

        auto shader = std::make_unique<vkdev::Shader>(*device);
        shader->create(shaderData);
        assets.shaders["shader"] = std::move(shader);
    }

    // Create one descriptor pool which will have a descriptor set for each image in the swap chain
    // note that we need to specify a pool size for each type of descriptor that we have in our shader.
    void createDescriptor() {
        vkdev::Material material;
        material.shader = "shader";
        material.textures["texSampler"] = assets.textures["texture"].get();

        descriptor = std::make_unique<vkdev::Descriptor>(*device);
        descriptor->create(material, assets, static_cast<uint32_t>(swapchain->images.size()), _mipLevels);
    }

    void createGraphicsPipeline() {
        auto& shader = assets.shaders["shader"];
        auto& mesh = assets.meshes["mesh"];

        // shader stage describes which shader is our vertex / fragment shader
        VkPipelineShaderStageCreateInfo vertexStage = {};
        vertexStage.sType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO;
        vertexStage.stage = VK_SHADER_STAGE_VERTEX_BIT;
        vertexStage.module = shader->vertexShader;
        vertexStage.pName = "main"; // this is the entrypoint for the shader.

        VkPipelineShaderStageCreateInfo fragmentStage = {};
        fragmentStage.sType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO;
        fragmentStage.stage = VK_SHADER_STAGE_FRAGMENT_BIT;
        fragmentStage.module = shader->fragmentShader;
        fragmentStage.pName = "main"; // this is the entrypoint for the shader.

        VkPipelineShaderStageCreateInfo shaderStages[] = { vertexStage, fragmentStage };

        // get the data structures for binding the array and also describing its attributes.  See vertex struct.
        const auto bindingDescription = mesh->getBindingDescription();
        const auto attributeDescriptions = mesh->getAttributeDescriptions();

        // describe the input format of vertex data
        VkPipelineVertexInputStateCreateInfo vertexInput = {};
        vertexInput.sType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO;
        vertexInput.vertexBindingDescriptionCount = 1;
        vertexInput.pVertexBindingDescriptions = &bindingDescription;
        vertexInput.vertexAttributeDescriptionCount = static_cast<uint32_t>(attributeDescriptions.size());
        vertexInput.pVertexAttributeDescriptions = attributeDescriptions.data();

        // define the type of primitive we will be drawing
        VkPipelineInputAssemblyStateCreateInfo inputAssembly = {};
        inputAssembly.sType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO;
        inputAssembly.topology = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST;
        inputAssembly.primitiveRestartEnable = VK_FALSE;

        // enable depth + stencil buffer
        VkPipelineDepthStencilStateCreateInfo depthStencil = {};
        depthStencil.sType = VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO;
        depthStencil.depthTestEnable = VK_TRUE;
        depthStencil.depthWriteEnable = VK_TRUE;
        depthStencil.depthCompareOp = VK_COMPARE_OP_LESS;

        // note we will not be enabling a specific depth bounds test
        depthStencil.depthBoundsTestEnable = VK_FALSE;
        depthStencil.minDepthBounds = 0.0f; // Optional
        depthStencil.maxDepthBounds = 1.0f; // Optional

        // not used at the moemnt
        depthStencil.stencilTestEnable = VK_FALSE;
        depthStencil.front = {}; // Optional
        depthStencil.back = {}; // Optional

        VkViewport viewport = {};
        viewport.x = 0.0f;
        viewport.y = 0.0f;
        viewport.width = static_cast<float>(swapchain->extent.width);
        viewport.height = static_cast<float>(swapchain->extent.height);
        viewport.minDepth = 0.0f;
        viewport.maxDepth = 1.0f;

        VkRect2D scissor = {};
        scissor.offset = { 0,0 };
        scissor.extent = swapchain->extent;

        VkPipelineViewportStateCreateInfo viewportState = {};
        viewportState.sType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO;
        viewportState.viewportCount = 1;
        viewportState.pViewports = &viewport;
        viewportState.scissorCount = 1;
        viewportState.pScissors = &scissor;

        VkPipelineRasterizationStateCreateInfo rasterizer = {};
        rasterizer.sType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO;
        rasterizer.depthClampEnable = VK_FALSE;
        rasterizer.rasterizerDiscardEnable = VK_FALSE;
        rasterizer.polygonMode = VK_POLYGON_MODE_FILL;
        rasterizer.lineWidth = 1.0f; // note setting this above 1.0 requires enabling of widelines GPU feature
        rasterizer.cullMode = VK_CULL_MODE_BACK_BIT;
        rasterizer.frontFace = VK_FRONT_FACE_COUNTER_CLOCKWISE; // note that this is changed to counter clockwise due to Y-flip in projection matrix

        // add constant value to depth or a bias
        rasterizer.depthBiasEnable = VK_FALSE;
        rasterizer.depthBiasConstantFactor = 0.0f; // Optional
        rasterizer.depthBiasClamp = 0.0f; // Optional
        rasterizer.depthBiasSlopeFactor = 0.0f; // Optional

        // we will return to multisampling later
        VkPipelineMultisampleStateCreateInfo multisampling = {};
        multisampling.sType = VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO;
        multisampling.sampleShadingEnable = VK_FALSE;
        multisampling.rasterizationSamples = _msaaSamples;
        multisampling.minSampleShading = 1.0f; // Optional
        multisampling.pSampleMask = nullptr; // Optional
        multisampling.alphaToCoverageEnable = VK_FALSE; // Optional
        multisampling.alphaToOneEnable = VK_FALSE; // Optional

        // color blending
        VkPipelineColorBlendAttachmentState colorBlendAttachment = {};
        colorBlendAttachment.colorWriteMask = VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT;
        colorBlendAttachment.blendEnable = VK_FALSE;
        colorBlendAttachment.srcColorBlendFactor = VK_BLEND_FACTOR_ONE; // Optional
        colorBlendAttachment.dstColorBlendFactor = VK_BLEND_FACTOR_ZERO; // Optional
        colorBlendAttachment.colorBlendOp = VK_BLEND_OP_ADD; // Optional
        colorBlendAttachment.srcAlphaBlendFactor = VK_BLEND_FACTOR_ONE; // Optional
        colorBlendAttachment.dstAlphaBlendFactor = VK_BLEND_FACTOR_ZERO; // Optional
        colorBlendAttachment.alphaBlendOp = VK_BLEND_OP_ADD; // Optional

        VkPipelineColorBlendStateCreateInfo colorBlending = {};
        colorBlending.sType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO;
        colorBlending.logicOpEnable = VK_FALSE;
        colorBlending.logicOp = VK_LOGIC_OP_COPY; // Optional
        colorBlending.attachmentCount = 1;
        colorBlending.pAttachments = &colorBlendAttachment;
        colorBlending.blendConstants[0] = 0.0f; // Optional
        colorBlending.blendConstants[1] = 0.0f; // Optional
        colorBlending.blendConstants[2] = 0.0f; // Optional
        colorBlending.blendConstants[3] = 0.0f; // Optional

        VkPipelineLayoutCreateInfo pipelineLayoutInfo = {};
        pipelineLayoutInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO;
        pipelineLayoutInfo.setLayoutCount = 1; // Optional
        pipelineLayoutInfo.pSetLayouts = &shader->descriptorLayout;
        pipelineLayoutInfo.pushConstantRangeCount = 0; // Optional
        pipelineLayoutInfo.pPushConstantRanges = nullptr; // Optional

        if (vkCreatePipelineLayout(device->logical, &pipelineLayoutInfo, nullptr, &_pipelineLayout) != VK_SUCCESS) {
            throw std::runtime_error("failed to create pipeline layout!");
        }

        VkGraphicsPipelineCreateInfo pipelineInfo = {};
        pipelineInfo.sType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO;
        pipelineInfo.stageCount = 2;
        pipelineInfo.pStages = shaderStages;
        pipelineInfo.pVertexInputState = &vertexInput;
        pipelineInfo.pInputAssemblyState = &inputAssembly;
        pipelineInfo.pViewportState = &viewportState;
        pipelineInfo.pRasterizationState = &rasterizer;
        pipelineInfo.pMultisampleState = &multisampling;
        pipelineInfo.pDepthStencilState = &depthStencil;
        pipelineInfo.pColorBlendState = &colorBlending;
        pipelineInfo.pDynamicState = nullptr; // will come back to this later

        pipelineInfo.layout = _pipelineLayout;

        pipelineInfo.renderPass = _renderPass;
        pipelineInfo.subpass = 0;

        pipelineInfo.basePipelineHandle = VK_NULL_HANDLE;

        if (vkCreateGraphicsPipelines(device->logical, VK_NULL_HANDLE, 1, &pipelineInfo, nullptr, &_graphicsPipeline) != VK_SUCCESS) {
            throw std::runtime_error("failed to create graphics pipeline");
        }
    }

    void createFramebuffers() {
        _swapChainFramebuffers.resize(swapchain->imageViews.size());

        for (size_t i = 0; i < swapchain->imageViews.size(); i++) {
            // The color attachment differs for every swap chain image, but the same depth image can be used by all of them because only a single subpass is running at the same time due to our semaphores
            std::array<VkImageView, 3> attachments = { msaaColorImage->view, depthImage->view, swapchain->imageViews[i] };

            VkFramebufferCreateInfo framebufferInfo = {};
            framebufferInfo.sType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO;
            framebufferInfo.renderPass = _renderPass;
            framebufferInfo.attachmentCount = static_cast<uint32_t>(attachments.size());
            framebufferInfo.pAttachments = attachments.data();
            framebufferInfo.width = swapchain->extent.width;
            framebufferInfo.height = swapchain->extent.height;
            framebufferInfo.layers = 1;

            if (vkCreateFramebuffer(device->logical, &framebufferInfo, nullptr, &_swapChainFramebuffers[i]) != VK_SUCCESS) {
                throw std::runtime_error("failed to create framebuffer for swap chain images");
            }
        }
    }

    // drawing commands involves binding a framebuffer, we will have to record a command buffer for every image in the swap chain.
    // TODO: look into use of secondary command buffer
    void createCommandBuffers() {
        auto& mesh = assets.meshes["mesh"];

        _commandBuffers.resize(_swapChainFramebuffers.size());

        VkCommandBufferAllocateInfo allocInfo = {};
        allocInfo.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO;
        allocInfo.commandPool = commandPool->handle;
        allocInfo.level = VK_COMMAND_BUFFER_LEVEL_PRIMARY;
        allocInfo.commandBufferCount = static_cast<uint32_t>(_commandBuffers.size());

        if (vkAllocateCommandBuffers(device->logical, &allocInfo, _commandBuffers.data()) != VK_SUCCESS) {
            throw std::runtime_error("failed to allocate command buffers");
        }

        for (size_t i = 0; i < _commandBuffers.size(); i++) {
            VkCommandBufferBeginInfo beginInfo = {};
            beginInfo.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO;
            beginInfo.flags = 0;
            beginInfo.pInheritanceInfo = nullptr;

            if (vkBeginCommandBuffer(_commandBuffers[i], &beginInfo) != VK_SUCCESS) {
                throw std::runtime_error("failed to begin command buffer recording");
            }

            VkRenderPassBeginInfo renderPassInfo = {};
            renderPassInfo.sType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO;
            renderPassInfo.renderPass = _renderPass;
            renderPassInfo.framebuffer = _swapChainFramebuffers[i];

            renderPassInfo.renderArea.offset = { 0, 0 };
            renderPassInfo.renderArea.extent = swapchain->extent;

            // clear value order should correspond to order of attachments.
            std::array<VkClearValue, 2> clearValues = {};
            clearValues[0].color = { 0.0f, 0.0f, 0.0f, 1.0f };
            clearValues[1].depthStencil = { 1.0f, 0 }; // The range of depths in the depth buffer is 0.0 to 1.0 in Vulkan, where 1.0 lies at the far view plane and 0.0 at the near view plane.

            renderPassInfo.clearValueCount = static_cast<uint32_t>(clearValues.size());
            renderPassInfo.pClearValues = clearValues.data();

            vkCmdBeginRenderPass(_commandBuffers[i], &renderPassInfo, VK_SUBPASS_CONTENTS_INLINE);
            vkCmdBindPipeline(_commandBuffers[i], VK_PIPELINE_BIND_POINT_GRAPHICS, _graphicsPipeline);

            VkBuffer vertexBuffers[] = { mesh->vertexBuffer.buffer };
            VkDeviceSize offsets[] = { 0 };

            vkCmdBindVertexBuffers(_commandBuffers[i], 0, 1, vertexBuffers, offsets);

            // note that the current sample model has index count > 65535 so we use uint32_t
            //vkCmdBindIndexBuffer(_commandBuffers[i], _indexBuffer, 0, VK_INDEX_TYPE_UINT16);
            vkCmdBindIndexBuffer(_commandBuffers[i], mesh->indexBuffer.buffer, 0, VK_INDEX_TYPE_UINT32);

            // descriptor sets are not unique to graphics pipeline.  Therefore we need to specify we are binding to graphics (as opposed to compute)
            vkCmdBindDescriptorSets(_commandBuffers[i], VK_PIPELINE_BIND_POINT_GRAPHICS, _pipelineLayout, 0, 1, &descriptor->descriptorSets[i], 0, nullptr);

            vkCmdDrawIndexed(_commandBuffers[i], static_cast<uint32_t>(mesh->elementCount), 1, 0, 0, 0);

            vkCmdEndRenderPass(_commandBuffers[i]);

            if (vkEndCommandBuffer(_commandBuffers[i]) != VK_SUCCESS) {
                throw std::runtime_error("failed to record command buffer");
            }
        }
    }

    void updateUniformBuffer(uint32_t bufferIndex) {
        // get the application time
        static auto startTime = std::chrono::high_resolution_clock::now();
        auto currentTime = std::chrono::high_resolution_clock::now();
        float time = std::chrono::duration<float, std::chrono::seconds::period>(currentTime - startTime).count();

        // define MVP
        UniformBufferObject ubo = {};
        ubo.model = glm::rotate(glm::mat4(1.0f), time * glm::radians(90.0f), glm::vec3(0.0f, 0.0f, 1.0f));
        ubo.view = glm::lookAt(glm::vec3(2.0f, 2.0f, 2.0f), glm::vec3(0.0f, 0.0f, 0.0f), glm::vec3(0.0f, 0.0f, 1.0f));
        ubo.proj = glm::perspective(glm::radians(45.0f), swapchain->extent.width / (float)swapchain->extent.height, 0.1f, 10.0f);

        // GLM was originally designed for OpenGL, where the Y coordinate of the clip coordinates is inverted.
        // The easiest way to compensate for that is to flip the sign on the scaling factor of the Y axis in the projection matrix.
        // If you don't do this, then the image will be rendered upside down.
        ubo.proj[1][1] *= -1;

        // copy the MVP into the corresponding uniform buffer
        // TODO: look into using push constants for a more efficient means of passing the uniform data to shaders
        auto& uniformBufferVector = descriptor->uniformBuffers["UniformBufferObject"];
        void* data = nullptr;
        vkMapMemory(device->logical, uniformBufferVector[bufferIndex].memory, 0, sizeof(ubo), 0, &data);
        memcpy(data, &ubo, sizeof(ubo));
        vkUnmapMemory(device->logical, uniformBufferVector[bufferIndex].memory);
    }

    VkFormat findSupportedFormat(const std::vector<VkFormat>& candidateFormats, VkImageTiling tiling, VkFormatFeatureFlags features) {
        for (auto candidateFormat : candidateFormats) {
            VkFormatProperties formatProperties;
            vkGetPhysicalDeviceFormatProperties(device->physical, candidateFormat, &formatProperties);

            if (tiling == VK_IMAGE_TILING_LINEAR && (formatProperties.linearTilingFeatures & features) == features) {
                return candidateFormat;
            }
            else if (tiling == VK_IMAGE_TILING_OPTIMAL && (formatProperties.optimalTilingFeatures & features) == features) {
                return candidateFormat;
            }
        }

        throw std::runtime_error("failed to find a supported format");
    }

    // this will retrieve the format we will use to create the depth buffer image
    // note that we are requiring that the format support a stencil buffer component
    VkFormat findDepthBufferFormat() {
        return findSupportedFormat(
            { VK_FORMAT_D32_SFLOAT, VK_FORMAT_D32_SFLOAT_S8_UINT, VK_FORMAT_D24_UNORM_S8_UINT },
            VK_IMAGE_TILING_OPTIMAL,
            VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT
        );
    }

    bool formatHasStencilComponent(VkFormat format) {
        return format == VK_FORMAT_D32_SFLOAT_S8_UINT || format == VK_FORMAT_D24_UNORM_S8_UINT;
    }

    void createDepthResources() {
        depthImage = std::make_unique<vkdev::Image>(*device);
        const VkFormat depthFormat = findDepthBufferFormat();

        depthImage->create(swapchain->extent.width, swapchain->extent.height, 1, _msaaSamples, depthFormat, VK_IMAGE_TILING_OPTIMAL, VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT, VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT);
        depthImage->createView(VK_IMAGE_ASPECT_DEPTH_BIT);
        depthImage->transitionLayout(*commandPool, VK_IMAGE_LAYOUT_UNDEFINED, VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL);  // note this is optional in this case
    }

    // create the multisampled color image buffer.  Note that multisampled images should not have multiple mip levels (enforced by the spec)
    // We are only ever rendering one image at a time, so only one multisampled image is needed
    void createMsaaColorResources() {
        msaaColorImage = std::make_unique<vkdev::Image>(*device);

        const VkFormat imageFormat = swapchain->imageFormat;

        msaaColorImage->create(swapchain->extent.width, swapchain->extent.height, 1, _msaaSamples, imageFormat, VK_IMAGE_TILING_OPTIMAL, VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT | VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT, VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT);
        msaaColorImage->createView(VK_IMAGE_ASPECT_COLOR_BIT);
    }

    void init() {
        window = std::make_unique<vkdev::Window>(instance);
        window->createWindow(WIDTH, HEIGHT);

        instance.create(_enableValidation);
        
        window->createSurface();
        device = std::make_unique<vkdev::Device>(instance, window->surface);
        device->create(requiredDeviceExtensions);

        _msaaSamples = std::min(_msaaSamples, device->getMaxSupportedSampleCount());

        swapchain = std::make_unique<vkdev::SwapChain>(*device, window->surface);
        swapchain->create(window->getFramebufferSize());

        commandPool = std::make_unique<vkdev::CommandPool>(*device, device->graphicsQueue);
        commandPool->create();

        loadAssets();

        createRenderPass();
        createGraphicsPipeline();


        createMsaaColorResources();
        createDepthResources();
        createFramebuffers();
        createDescriptor();
        createCommandBuffers();
        swapchain->createSyncObjects();
    }

    void recreateSwapChain() {
        window->waitForMinimize();

        vkDeviceWaitIdle(device->logical);

        cleanupSwapChain();
        swapchain->create(window->getFramebufferSize());
        
        createRenderPass();
        createGraphicsPipeline();
        createMsaaColorResources();
        createDepthResources();
        createFramebuffers();
        createDescriptor();
        createCommandBuffers();
    }

    void mainLoop() {
        auto last_update_time = std::chrono::high_resolution_clock::now();
        while (!window->shouldClose()) {
            auto current_update_time = std::chrono::high_resolution_clock::now();
            auto milliseconds = std::chrono::duration_cast<std::chrono::milliseconds>(current_update_time - last_update_time).count();

            if (milliseconds >= 16) {
                window->poll();

                if (window->wasResized()) {
                    window->markResizeHandled();
                    recreateSwapChain();
                }
                else {
                    uint32_t frameIndex = 0;
                    VkResult result = swapchain->aquireFrame(frameIndex);

                    if (result == VK_ERROR_OUT_OF_DATE_KHR) {
                        recreateSwapChain();
                    }
                    else {
                        updateUniformBuffer(frameIndex);
                        result = swapchain->drawFrame(frameIndex, _commandBuffers[frameIndex]);

                        if (result != VK_SUCCESS) {
                            recreateSwapChain();
                        }
                    }
                    last_update_time = current_update_time;
                }
            }
            else {
                std::this_thread::sleep_for(std::chrono::milliseconds(1));
            }
        }

        vkDeviceWaitIdle(device->logical);
    }

    void cleanupSwapChain() {
        msaaColorImage->cleanup();

        depthImage->cleanup();

        for (auto framebuffer : _swapChainFramebuffers) {
            vkDestroyFramebuffer(device->logical, framebuffer, nullptr);
        }

        vkFreeCommandBuffers(device->logical, commandPool->handle, static_cast<uint32_t>(_commandBuffers.size()), _commandBuffers.data());

        vkDestroyPipeline(device->logical, _graphicsPipeline, nullptr);
        vkDestroyPipelineLayout(device->logical, _pipelineLayout, nullptr);
        vkDestroyRenderPass(device->logical, _renderPass, nullptr);

        swapchain->cleanupImages();

        descriptor->cleanup();
    }

    void cleanup() {
        cleanupSwapChain();

        swapchain->cleanupSyncObjects();

        commandPool->cleanup();

        assets.cleanup();

        vkDestroyDevice(device->logical, nullptr);
        window->cleanupSurface();
        instance.cleanup();

        window->cleanupWindow();

        glfwTerminate();
    }

public:
    void run() {
        init();
        mainLoop();
        cleanup();
    }

    inline void enableValidationLayers(bool enableValidation) { _enableValidation = enableValidation; }

private:
    std::unique_ptr<vkdev::Window> window;
    vkdev::Instance instance;
    std::unique_ptr<vkdev::Device> device;
    VkDebugUtilsMessengerEXT _debugMessenger = VK_NULL_HANDLE;

    std::unique_ptr<vkdev::SwapChain> swapchain;
    std::vector<VkFramebuffer> _swapChainFramebuffers;

    VkRenderPass _renderPass = VK_NULL_HANDLE;
    VkPipelineLayout _pipelineLayout = VK_NULL_HANDLE;
    VkPipeline _graphicsPipeline;

    std::unique_ptr<vkdev::CommandPool> commandPool;
    std::vector<VkCommandBuffer> _commandBuffers;

    vkdev::Assets assets;

    std::unique_ptr<vkdev::Descriptor> descriptor;

    uint32_t _mipLevels = 1;

    std::unique_ptr<vkdev::Image> depthImage;

    VkSampleCountFlagBits _msaaSamples = VK_SAMPLE_COUNT_4_BIT;
    std::unique_ptr<vkdev::Image> msaaColorImage;

    bool _enableValidation = false;
};

int main(int argc, char** argv) {
    VulkanTestApplication app;

#if NDEBUG
    app.enableValidationLayers(false);
#else
    app.enableValidationLayers(true);
#endif

    try {
        app.run();
    }
    catch (const std::exception & e) {
        std::cerr << e.what() << std::endl;
        return EXIT_FAILURE;
    }

    return EXIT_SUCCESS;
}